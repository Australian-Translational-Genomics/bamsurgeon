#!/bin/env python

import argparse, random, pysam, re

def main(args):

    genome = None
    if args.fastaFile:
        genome = pysam.Fastafile(args.fastaFile)

    if args.requireseq and not args.fastaFile:
        raise ValueError("--requireseq set without -f/--fasta")

    chrlen = {}
    for line in open(args.indexFile, 'r'):
        c = line.strip().split()
        chr = c[0]
        size = int(c[1])
        chrlen[chr] = size

    # calculate offsets
    offset = 0
    chroffset = {}
    for chrom in sorted(chrlen.iterkeys()):
        offset += int(chrlen[chrom])
        chroffset[chrom] = offset

    genomelen = offset

    # random picks
    n = 0
    while n < int(args.numpicks):
        rndloc = random.randint(0,genomelen)
        lastoffset = 0
        rndchr = None
        for chrom in sorted(chrlen.iterkeys()):
            offset = int(chroffset[chrom])
            assert lastoffset < offset
            if rndloc >= lastoffset and rndloc < offset:
                rndchr = chrom
                rndloc -= lastoffset
            lastoffset = offset

        fragstart = rndloc
        fragend   = rndloc + int(args.fraglen)
        if fragend < offset:
            if genome:
                seq = genome.fetch(rndchr,fragstart,fragend)
                assert seq
                if args.requireseq:
                    if re.search('[ATGCatgc]',seq):
                        print "\t".join((rndchr,str(fragstart),str(fragend),seq))
                        n += 1
                else:
                    print "\t".join((rndchr,str(fragstart),str(fragend),seq))
                    n += 1
            else:
                print "\t".join((rndchr,str(fragstart),str(fragend)))
                n += 1

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="pick random sites from a samtools-indexed genome")
    parser.add_argument('-i', '--index', dest='indexFile', required=True, help="use the .fai file generated by samtools faidx yourgenome.fasta")
    parser.add_argument('-f', '--fasta', dest='fastaFile', default=None, help="if used, the fragment sequence is returned with coordinates")
    parser.add_argument('-n', '--num', dest='numpicks', required=True, help="number of sites to pick")
    parser.add_argument('-l', '--fraglength', dest='fraglen', default=1, help="length of sequence to pick, (default=1)")
    parser.add_argument('--requireseq', action="store_true", help="do not select hits in unsequenced regions, requires fasta file")
    args = parser.parse_args()
    main(args)
